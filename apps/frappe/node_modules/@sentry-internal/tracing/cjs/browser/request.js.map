{"version":3,"file":"request.js","sources":["../../../src/browser/request.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { getCurrentHub, getDynamicSamplingContextFromClient, hasTracingEnabled } from '@sentry/core';\nimport type { HandlerDataFetch, Span } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  BAGGAGE_HEADER_NAME,\n  browserPerformanceTimeOrigin,\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  SENTRY_XHR_DATA_KEY,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nimport { instrumentFetchRequest } from '../common/fetch';\nimport { addPerformanceInstrumentationHandler } from './instrument';\n\nexport const DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * @deprecated Will be removed in v8.\n   * Use `shouldCreateSpanForRequest` to control span creation and `tracePropagationTargets` to control\n   * trace header attachment.\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * List of strings and/or regexes used to determine which outgoing requests will have `sentry-trace` and `baggage`\n   * headers attached.\n   *\n   * @deprecated Use the top-level `tracePropagationTargets` option in `Sentry.init` instead.\n   * This option will be removed in v8.\n   *\n   * Default: ['localhost', /^\\//] @see {DEFAULT_TRACE_PROPAGATION_TARGETS}\n   */\n  tracePropagationTargets: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * If true, Sentry will capture http timings and add them to the corresponding http spans.\n   *\n   * Default: true\n   */\n  enableHTTPTimings: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * Default: (url: string) => true\n   */\n  shouldCreateSpanForRequest?(this: void, url: string): boolean;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    [SENTRY_XHR_DATA_KEY]?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    getRequestHeader?: (key: string) => string;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  enableHTTPTimings: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  const {\n    traceFetch,\n    traceXHR,\n    // eslint-disable-next-line deprecation/deprecation\n    tracePropagationTargets,\n    // eslint-disable-next-line deprecation/deprecation\n    tracingOrigins,\n    shouldCreateSpanForRequest,\n    enableHTTPTimings,\n  } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_: string) => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = (url: string): boolean =>\n    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler('fetch', (handlerData: HandlerDataFetch) => {\n      const createdSpan = instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler('xhr', (handlerData: XHRData) => {\n      const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n}\n\nfunction isPerformanceResourceTiming(entry: PerformanceEntry): entry is PerformanceResourceTiming {\n  return (\n    entry.entryType === 'resource' &&\n    'initiatorType' in entry &&\n    typeof (entry as PerformanceResourceTiming).nextHopProtocol === 'string' &&\n    (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest')\n  );\n}\n\n/**\n * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n * so that when timings hit their per-browser limit they don't need to be removed.\n *\n * @param span A span that has yet to be finished, must contain `url` on data.\n */\nfunction addHTTPTimings(span: Span): void {\n  const url = span.data.url;\n\n  if (!url) {\n    return;\n  }\n\n  const cleanup = addPerformanceInstrumentationHandler('resource', ({ entries }) => {\n    entries.forEach(entry => {\n      if (isPerformanceResourceTiming(entry) && entry.name.endsWith(url)) {\n        const spanData = resourceTimingEntryToSpanData(entry);\n        spanData.forEach(data => span.setData(...data));\n        // In the next tick, clean this handler up\n        // We have to wait here because otherwise this cleans itself up before it is fully done\n        setTimeout(cleanup);\n      }\n    });\n  });\n}\n\n/**\n * Converts ALPN protocol ids to name and version.\n *\n * (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)\n * @param nextHopProtocol PerformanceResourceTiming.nextHopProtocol\n */\nexport function extractNetworkProtocol(nextHopProtocol: string): { name: string; version: string } {\n  let name = 'unknown';\n  let version = 'unknown';\n  let _name = '';\n  for (const char of nextHopProtocol) {\n    // http/1.1 etc.\n    if (char === '/') {\n      [name, version] = nextHopProtocol.split('/');\n      break;\n    }\n    // h2, h3 etc.\n    if (!isNaN(Number(char))) {\n      name = _name === 'h' ? 'http' : _name;\n      version = nextHopProtocol.split(_name)[1];\n      break;\n    }\n    _name += char;\n  }\n  if (_name === nextHopProtocol) {\n    // webrtc, ftp, etc.\n    name = _name;\n  }\n  return { name, version };\n}\n\nfunction getAbsoluteTime(time: number = 0): number {\n  return ((browserPerformanceTimeOrigin || performance.timeOrigin) + time) / 1000;\n}\n\nfunction resourceTimingEntryToSpanData(resourceTiming: PerformanceResourceTiming): [string, string | number][] {\n  const { name, version } = extractNetworkProtocol(resourceTiming.nextHopProtocol);\n\n  const timingSpanData: [string, string | number][] = [];\n\n  timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n\n  if (!browserPerformanceTimeOrigin) {\n    return timingSpanData;\n  }\n  return [\n    ...timingSpanData,\n    ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)],\n    ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)],\n    ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)],\n    ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)],\n    ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)],\n    ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)],\n    ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)],\n    ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)],\n    ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)],\n    ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)],\n  ];\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nexport function shouldAttachHeaders(url: string, tracePropagationTargets: (string | RegExp)[] | undefined): boolean {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track xhr request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\n// eslint-disable-next-line complexity\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): Span | undefined {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n\n  if (!hasTracingEnabled() || (xhr && xhr.__sentry_own_request__) || !xhr || !sentryXhrData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(sentryXhrData.url);\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      span.setHttpStatus(sentryXhrData.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  const parentSpan = scope.getSpan();\n\n  const span =\n    shouldCreateSpanResult && parentSpan\n      ? parentSpan.startChild({\n          data: {\n            ...sentryXhrData.data,\n            type: 'xhr',\n            'http.method': sentryXhrData.method,\n            url: sentryXhrData.url,\n          },\n          description: `${sentryXhrData.method} ${sentryXhrData.url}`,\n          op: 'http.client',\n          origin: 'auto.http.browser',\n        })\n      : undefined;\n\n  if (span) {\n    xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n  }\n\n  if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url)) {\n    if (span) {\n      const transaction = span && span.transaction;\n      const dynamicSamplingContext = transaction && transaction.getDynamicSamplingContext();\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      setHeaderOnXhr(xhr, span.toTraceparent(), sentryBaggageHeader);\n    } else {\n      const client = hub.getClient();\n      const { traceId, sampled, dsc } = scope.getPropagationContext();\n      const sentryTraceHeader = generateSentryTraceHeader(traceId, undefined, sampled);\n      const dynamicSamplingContext =\n        dsc || (client ? getDynamicSamplingContextFromClient(traceId, client, scope) : undefined);\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n      setHeaderOnXhr(xhr, sentryTraceHeader, sentryBaggageHeader);\n    }\n  }\n\n  return span;\n}\n\nfunction setHeaderOnXhr(\n  xhr: NonNullable<XHRData['xhr']>,\n  sentryTraceHeader: string,\n  sentryBaggageHeader: string | undefined,\n): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    xhr.setRequestHeader!('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n      // We can therefore simply set a baggage header without checking what was there before\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      xhr.setRequestHeader!(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n  } catch (_) {\n    // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n  }\n}\n"],"names":["addInstrumentationHandler","instrumentFetchRequest","addPerformanceInstrumentationHandler","browserPerformanceTimeOrigin","stringMatchesSomePattern","SENTRY_XHR_DATA_KEY","hasTracingEnabled","getCurrentHub","dynamicSamplingContextToSentryBaggageHeader","generateSentryTraceHeader","getDynamicSamplingContextFromClient","BAGGAGE_HEADER_NAME"],"mappings":"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"}